{"/home/travis/build/npmtest/node-npmtest-crdt/test.js":"/* istanbul instrument in package npmtest_crdt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-crdt/lib.npmtest_crdt.js":"/* istanbul instrument in package npmtest_crdt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_crdt = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_crdt = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-crdt/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-crdt && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_crdt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_crdt\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_crdt.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_crdt.rollup.js'] =\n            local.assetsDict['/assets.npmtest_crdt.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_crdt.__dirname + '/lib.npmtest_crdt.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-crdt/node_modules/crdt/index.js":"//index\n'use strict';\n\nvar inherits     = require('util').inherits\nvar EventEmitter = require('events').EventEmitter\n\nexports = module.exports = require('./doc')\nexports.Row              = require('./row')\n\nexports.sync             = sync\nexports.Set              = require('./set')\nexports.Seq              = require('./seq')\n\nexports.Doc = exports\n\nfunction sync(a, b) {\n  var as = a.createStream()\n  var bs = b.createStream()\n  return as.pipe(bs).pipe(as)\n}\n\n\nexports.createStream = function (doc, opts) {\n  return doc.createStream(opts)\n}\n","/home/travis/build/npmtest/node-npmtest-crdt/node_modules/crdt/doc.js":"var inherits     = require('util').inherits\nvar Row          = require('./row')\nvar between      = require('between')\nvar Set          = require('./set')\nvar Seq          = require('./seq')\nvar Scuttlebutt  = require('scuttlebutt')\nvar EventEmitter = require('events').EventEmitter\nvar createId     = require('scuttlebutt/util').createId\n\ninherits(Doc, Scuttlebutt)\n\nfunction merge(to, from) {\n  for(var k in from)\n    to[k] = from[k]\n  return to\n}\n\n\nmodule.exports = Doc\n//doc\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/*\n  idea: instead of using a tombstone for deletes,\n  use a anti-tombstone to show something is alive.\n  breathing: count. -- updated by an authority.\n  set breathing to 0 to kill something.\n\n  if a node has rows that have been garbage collected on the server,\n  it will be obvious from the value of breathing.\n\n  node disconnects... makes changes...\n  other nodes delete some things, which get garbage collected.\n\n  node reconnects.\n  server updates the node, but only increments _breathing for some rows.\n\n  clearly, the nodes that do not have an upto date _breathing are either\n  dead, or where created by the node while it was offline.\n\n  would breathing need to be a vector clock?\n\n  if the disconneded node is still updating the rows,\n  maybe it shouldn't be deleted, that is, undeleted.\n\n  may be on to something here... but this needs more thinking.\n\n  will depend on how much churn something has...\n*/\n\nfunction order (a, b) {\n  return between.strord(a[1], b[1]) || between.strord(a[2], b[2])\n}\n\nfunction Doc (id) {\n  if (!(this instanceof Doc)) return new Doc(id)\n  //the id of the doc refers to the instance.\n  //that is, to the node.\n  //it's used to identify a node\n//  this.id = id || '#' + Math.round(Math.random()*1000)\n  this.rows = {}\n  this.hist = {}\n  this.sets = new EventEmitter() //for tracking membership of sets.\n  this.setMaxListeners(Infinity)\n  this.sets.setMaxListeners(Infinity)\n  Scuttlebutt.call(this, id)\n\n}\n\nDoc.prototype.add = function (initial) {\n  var id = initial.id === undefined ? createId() : initial.id\n  if(id === '__proto__')\n    throw new Error('__proto__ is illegial id')\n  var r = this._add(id, 'local')\n  r._set(initial, 'local')\n  return r\n}\n\nDoc.prototype._add = function (id, source, change) {\n\n  var doc = this\n\n  if(id === '__proto__')\n    throw new Error('__proto__ is illegial id')\n  if(this.rows[id])\n    return this.rows[id]\n\n  var r = id instanceof Row ? id : new Row(id)\n  this.rows[r.id] = r\n\n  function track (changes, source) {\n    //console.log(changes, source)\n    doc.localUpdate([r.id, changes])\n  }\n\n  r.on('preupdate', track)\n\n  r.on('remove', function () {\n    r.removeAllListeners('preupdate')\n  })\n\n  r._new = true\n  return r\n}\n\nDoc.prototype.timeUpdated = function (row, key) {\n  var h = this.hist[row.id]\n  if(!h) return\n  return h[key][2]\n}\n\nDoc.prototype.set = function (id, change) {\n  if(id === '__proto__')\n    throw new Error('__proto__ is illegial id')\n  var r = this._add(id, 'local', change)\n  return r.set(change)\n}\n\nDoc.prototype.rm = function (id) {\n  this.set(id, null)\n}\n\n/*\n  histroy for each row is indexed by key.\n  key -> update that set that key.\n\n  so applying a change is as simple\n  as iterating over the keys in the rows hist\n  checking if the new update is more recent\n  than the hist update\n  if so, replace that keys hist.\n*/\n\nDoc.prototype.applyUpdate = function (update, source) {\n\n  //apply an update to a row.\n  //take into account histroy.\n  //and insert the change into the correct place.\n  if(!(Array.isArray(update[0])\n    && 'string' === typeof update[0][0]\n  )) return this.emit('invalid', new Error('invalid update'))\n\n  var id      = update[0][0]\n  var changes = update[0][1]\n  var timestamp = update[1]\n  var from    = update[2]\n\n  if(id === '__proto__')\n    return this.emit('invalid', new Error('__proto__ is illegial id'))\n\n  var changed = {}\n\n  var row = this._add(id, source)\n  var hist = this.hist[id] = this.hist[id] || {}\n  var emit = false, oldnews = false\n\n\n  //remember the most recent update from each node.\n  //now handled my scuttlebutt.\n//  if(!row.validate(changes)) return\n\n  if (changes === null) {\n\n    // clean up the history\n    for(var key in row.state) {\n      if(row.state.hasOwnProperty(key)) {\n          if(!hist[key] || order(hist[key], update) < 0) {\n            if(hist[key]) this.emit('_remove', hist[key])\n            hist[key] = [ null, update[1], update[2]]\n            emit = true\n          }\n      }\n    }\n\n    // remove from all sets that contain row\n    for (var setId in this.sets) {\n      var isSet = setId.indexOf(':') > 0\n      var set = this.sets[setId]\n      var setContainsRow = isSet && set && set.get(row.id)\n      if (setContainsRow) set.rm(row)\n    }\n\n    // delete from the doc rows\n    delete this.rows[id]\n    row.emit('removed')\n    this.emit('remove', row)\n  }\n  else {\n    var maybe = []\n    for(var key in changes) {\n      if(changes.hasOwnProperty(key)) { \n        var value = changes[key]\n        if(!hist[key] || order(hist[key], update) < 0) {\n          if(hist[key] && !~maybe.indexOf(hist[key]))\n            maybe.push(hist[key])\n          hist[key] = update\n          changed[key] = value\n          emit = true\n        }\n      }\n    }\n    var h = this.history()\n    var self = this\n    maybe.forEach(function (e) {\n      if(!~h.indexOf(e))\n        self.emit('_remove', e)\n    })\n  }\n\n//  probably, there may be mulitple sets that listen to the same key,\n//  but activate on different values...\n//\n//  hang on, in the mean time, I will probably only be managing n < 10 sets.\n//  at once,\n\n  merge(row.state, changed)\n  for(var k in changed)\n    this.sets.emit(k, row, changed)\n\n  if(!emit) return\n\n  if(row._new) {\n    this.emit('add', row)\n    this.emit('create', row) //alias\n    row._new = false\n  }\n  this.emit('_update', update)\n  row.emit('update', update, changed)\n  row.emit('changes', changes, changed)\n  row.emit('change', changed) //installing this in paralel, so tests still pass.\n  //will depreciate the old way later.\n  this.emit('update', update, source)   //rename this event to 'data' or 'diff'?\n  this.emit('row_update', row)          //rename this event to 'update'\n}\n\nDoc.prototype.history = function (sources) {\n  var h = []\n  for (var id in this.hist) {\n    var hist = this.hist[id]\n    for (var k in hist) {\n      if(!~h.indexOf(hist[k]) && Scuttlebutt.filter(hist[k], sources))\n        h.push(hist[k])\n    }\n  }\n  return h.sort(order)\n}\n\nfunction _set(self, key, val, type) {\n  var id = typeof key === 'string' && key + ':' + val\n  if(id && self.sets[id]) {\n    return self.sets[id]\n  }\n\n  var set = new type(self, key, val)\n  if (id) {\n    self.sets[id] = set\n  }\n  return set\n}\n\n\nDoc.prototype.createSet = function (key, val) {\n  if(key === '__proto__')\n    throw new Error('__proto__ is invalid key')\n  return _set(this, key, val, Set)\n}\n\nDoc.prototype.createSeq = function (key, val) {\n  if(key === '__proto__')\n    throw new Error('__proto__ is invalid key')\n  return _set(this, key, val, Seq)\n}\n\nDoc.prototype.toJSON = function () {\n  var j = {}\n  for (var k in this.rows) {\n    if(this.rows.hasOwnProperty(k))\n      j[k] = this.rows[k].state\n  }\n  return j\n}\n//retrive a reference to a row.\n//if the row is not created yet, create\nDoc.prototype.get = function (id) {\n  if(id === '__proto__') throw new Error('__proto__ is illegal id')\n  return this.rows[id] = this.rows[id] || this._add(new Row(id), 'local')\n}\n\n","/home/travis/build/npmtest/node-npmtest-crdt/node_modules/crdt/row.js":"//row\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n'use strict';\n\nvar inherits     = require('util').inherits\nvar EventEmitter = require('events').EventEmitter\n\nmodule.exports = Row\n\ninherits(Row, EventEmitter)\n\nfunction Row (id) {\n  this.id = id\n  this.state = {id: id}\n  this.setMaxListeners(Infinity)\n}\n\nRow.prototype.set = function (changes, v) {\n  if(arguments.length == 2) {\n    var k = changes \n    if(k === '__proto__')\n      return this\n    changes = {}\n    changes[k] = v\n  }\n\n  if(changes !== null && changes.id && changes.id !== this.state.id)\n    throw new Error('id cannot be changed')\n\n  this._set(changes, 'local')  \n  return this\n}\n\nRow.prototype.validate = function (changes) {\n  try {\n    this.emit('validate', changes)\n    return true\n  } catch (e) {\n    console.error('validation', e.message)\n    return false\n  } \n}\n\nRow.prototype._set = function (changes, source) {\n\n  //the change is applied by the Doc!\n  this.emit('preupdate', changes, source)\n  return this\n}\n\nRow.prototype.get = function (key) {\n  if(key)\n    return this.state[key]\n  return this.state\n}\n\nRow.prototype.toJSON = function () {\n  return this.state\n}\n\n","/home/travis/build/npmtest/node-npmtest-crdt/node_modules/crdt/set.js":"'use strict';\nvar inherits     = require('util').inherits\nvar EventEmitter = require('events').EventEmitter\nvar Row          = require('./row')\nvar between      = require('between')\n\ninherits(Set, EventEmitter)\n\nmodule.exports = Set\n\n//set\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/*\n  a set is just a query.\n  could expand this to enable replicating a subset of a document.\n  that could enable massive documents that are too large to fit in memory.\n  as long as they could be partitioned.\n\n  heh, join queries? or rather, recursive queries,\n  for when rows have sets.\n\n  that is my vibe. don't make a database you have to\n  _map_ to your application. pre-map the database.\n\n  could also specify sets like\n\n  //set of all things\n  {type: 'thing'}\n\n  //set of things with thier parts\n  { type: 'thing',\n    parts: {\n      parent_id: function (val) {return val == this.id}\n    }\n  }\n\n  or use map-reduces. remember, if the the reduce is\n  monotonic you don't have to remember each input.\n*/\n\nfunction Set(doc, key, value) {\n  var array = this._array = []\n  var rows = this.rows =  {}\n  var set = this\n  var filter\n\n  if ('function' === typeof key) {\n    filter = this.filter = key\n    key = null\n  } else {\n    //DO NOT CHANGE once you have created the set.\n    if(key === '__proto__') throw new Error('__proto__ is illegal key')\n    this.key = key\n    this.value = value\n  }\n\n  function add(row) {\n    if (rows[row.id]) {\n      return\n    }\n\n    array.push(row)\n    rows[row.id] = row\n    set.emit('add', row)\n\n    function remove (_, changed) {\n      if ((key && row.state[key] === value) ||\n          (filter && filter(row.state))\n      ) {\n        set.emit('changes', row, changed)\n        return\n      }\n      delete rows[row.id]\n      var i = array.indexOf(row)\n      if(~i) array.splice(i, 1)\n      set.emit('changes', row, changed)\n      set.emit('remove', row)\n      row.removeListener('changes', remove)\n    }\n\n    row.on('changes', remove)\n\n  }\n\n  if (!filter) {\n    doc.sets.on(key, function (row, changed) {\n      if(changed[key] !== value) return\n      add(row)\n    })\n  } else {\n    doc.on('create', function (row) {\n      if (filter(row.state)) {\n        add(row)\n      }\n    })\n  }\n\n\n  this.rm = this.remove = function (row) {\n    row = this.get(row)\n    if(!row) return\n    if (key) {\n      return row.set(key, null)\n    } else {\n      throw new Error(\"Set cannot remove rows with arbitary filters\")\n    }\n  }\n\n  for(var id in doc.rows) {\n    var row = doc.get(id)\n    if (key && row.get(key) === value) {\n      add(row)\n    } else if (filter && filter(row.state)) {\n      add(row)\n    }\n  }\n\n  this.setMaxListeners(Infinity)\n\n}\n\nSet.prototype.onEach = function (callback) {\n  this.forEach(callback)\n  this.on(\"add\", callback)\n}\n\nSet.prototype.asArray = function () {\n  return this._array\n}\n\nSet.prototype.toJSON = function () {\n  return this._array.map(function (e) {\n    return e.state\n  }).sort(function (a, b) {\n    return between.strord(a._sort || a.id, b._sort || b.id)\n  })\n}\n\nSet.prototype.each =\nSet.prototype.forEach = function (iter) {\n  return this._array.forEach(iter)\n}\n\nSet.prototype.get = function (id) {\n  if(!arguments.length)\n    return this.array\n  if(id === '__proto__') throw new Error('__proto__ is invalid id')\n  return (\n      'string' === typeof id ? this.rows[id]\n    : 'number' === typeof id ? this.rows[id]\n    : id && id.id            ? this.rows[id.id]\n    :                          null\n  )\n}\n\nSet.prototype.has = function (row) {\n  return this.get(row)\n}\n","/home/travis/build/npmtest/node-npmtest-crdt/node_modules/crdt/seq.js":"'use strict';\n\nvar Set      = require('./set')\nvar Row      = require('./row')\nvar inherits = require('util').inherits\nvar between  = require('between')\n\nmodule.exports = Seq\n\nfunction sort (array) {\n  return array.sort(function (a, b) {\n    return between.strord(a.get('_sort'), b.get('_sort'))\n  })\n}\n\ninherits(Seq, Set)\n\nfunction find (obj, iter) {\n\n  for(var k in obj) {\n    var v = obj[k]\n    if(iter(v, k, obj)) return v\n  }\n  return null\n}\n\nfunction Seq (doc, key, val) {\n  if(key == '__proto__')\n    throw new Error('__proto__ is invalid key')\n  \n  Set.call(this, doc, key, val)\n\n  if (typeof key !== 'string') {\n    key = null\n  }\n\n  var seq = this\n  this.on('changes', function (row, changes) {\n    if(!changes._sort) return\n    sort(seq._array)\n    //check if there is already an item with this sort key.\n    var prev =\n    find(seq._array, function (other) {\n      return other != row && other.get('_sort') == row.get('_sort')\n    })\n\n    //nudge it forward if it has the same key.\n    if(prev)\n      seq.insert(row, prev, seq.next(row))\n    else\n      seq.emit('move', row)\n  })\n  this.insert = function (obj, before, after) {\n\n    before = toKey(this.get(before) || '!')\n    after  = toKey(this.get(after)  || '~')\n\n    //must get id from the doc,\n    //because may be moving this item into this set.\n    if('string' === typeof obj)\n      obj = doc.rows[obj]\n\n    var _sort =\n       between.between(before, after )\n     + between.randstr(3) //add a random tail so it's hard\n                    //to concurrently add two items with the\n                    //same sort.\n\n    var r, changes\n    if(obj instanceof Row) {\n      r = obj\n      changes = {_sort: _sort}\n      if (key && r.get(key) != val) {\n        changes[key] = val\n      }\n      r.set(changes)\n    } else {\n      obj._sort = _sort\n      if (key) {\n        obj[key] = val\n      }\n      r = doc.set(id(obj), obj)\n    }\n    sort(this._array)\n    return r\n  }\n}\n\nfunction toKey (key) {\n\n  return (\n     'string' === typeof key ? key\n  :  key instanceof Row      ? key.get()._sort\n  :  key                     ? key._sort\n  : null\n  )\n\n}\n\n/*\n  items are relative to each other,\n  more like a linked list.\n  although it is possible to make an\n  index based interface, before after,\n  etc is more natural\n*/\n\nfunction max (ary, test, wantIndex) {\n  var max = null, _max = -1\n  if(!ary.length) return\n\n  for (var i = 0; i < ary.length; i++)\n    if(test(max, ary[i])) max = ary[_max = i]\n  return wantIndex ? _max : max\n}\n\nSeq.prototype.prev = function (key) {\n  key = toKey(this.get(key) || '~')\n  //find the greatest item that is less than `key`.\n  //since the list is kept in order,\n  //a binary search is used.\n  //think about that later\n  return max(this._array, function (M, m) {\n    if(toKey(m) < key)\n      return M ? toKey(m) > toKey(M) : true\n  })\n}\n\nSeq.prototype.next = function (key) {\n  key = toKey(this.get(key) || '!')\n  return max(this._array, function (M, m) {\n    if(toKey(m) > key)\n      return M ? toKey(m) < toKey(M) : true\n  })\n}\n\nfunction id(obj) {\n  return (obj.id\n  ||  obj._id\n  ||  '_' + Date.now()\n    + '_' + Math.round(Math.random()*1000)\n  )\n}\n\nSeq.prototype.asArray = function () {\n  return sort(this._array)\n}\n\nSeq.prototype.before = function (obj, before) {\n  return this.insert(obj, this.prev(before), before)\n}\n\nSeq.prototype.after = function (obj, after) {\n  return this.insert(obj, after, this.next(after))\n}\n\nSeq.prototype.first = function () {\n  return this._array[0]\n}\n\nSeq.prototype.last = function () {\n  return this._array[this._array.length - 1]\n}\n\nSeq.prototype.indexOf = function (obj) {\n  return this._array.indexOf('string' == typeof obj ? this.rows[obj] : obj)\n}\n\nSeq.prototype.at = function (i) {\n  if('__proto__' === i) throw new Error('__proto__ invalid index')\n  return this._array[i]\n}\n\nSeq.prototype.unshift = function (obj) {\n  return this.insert(obj, '!', this.first())\n}\n\nSeq.prototype.push = function (obj) {\n  return this.insert(obj, this.last(), '~')\n}\n\nSeq.prototype.length = function () {\n  return this._array.length\n}\n\nSeq.prototype.pop = function () {\n  return this.remove(this.last())\n}\n\nSeq.prototype.shift = function () {\n  return this.remove(this.first())\n}\n\n","/home/travis/build/npmtest/node-npmtest-crdt/node_modules/crdt/debug.js":"\nfunction findOrCreate(row) {\n  var id = row.id || row\n  //handle if an html element has been passed\n  if(row instanceof HTMLElement) return row\n  if(id)\n    el = document.getElementById(id)\n  if(!el) {\n    var el = document.createElement('div')\n    el.setAttribute('id', id)\n  }\n  el.classList.add('row')\n  return el\n}\n\nfunction css () {\n\nreturn '                 \\\n.row {                   \\\n  border: solid 1px gray;\\\n  margin: 4px;           \\\n  width: 400px           \\\n}                        \\\n.row .key {              \\\n  min-width: 75px;       \\\n  display: inline-block; \\\n}                        \\\n.row .value {            \\\n  margin: 2px;           \\\n  display: inline-block; \\\n}                        ';\n\n}\n\nfunction render (row) {\n  var html = ''//'<div class=row id=\"' row.id + '\">\\n'\n  var o = row.toJSON()\n  for(var k in o) {\n    html += '<div class=pair>'\n    html += '  <div class=key id=\"'+   row.id +':key:'+   k +'\">' + k + '</div>\\n'\n    html += '  <div class=value id=\"'+ row.id +':value:'+ k +'\">' + o[k] + '</div>\\n'\n    html += '</div>'\n  }\n  return html\n}\n\n//would be good to refactor this out...\n//and make it installable as a middleware... \n//hmm, not that simple because will need:\n//html, js, websocket to crdt documents.\n//probably best to be something that can be\n//added as an element to a page, for now.\n\nmodule.exports = function (id, doc) {\n  if(!doc)\n    doc = id, id = 'crdt_debugger'\n  var parent = findOrCreate(id)\n\n  var style = document.createElement('style')\n  style.innerText = css()\n  document.head.appendChild(style)\n\n  function update (row) {\n    var el = findOrCreate(row)\n    el.innerHTML = render(row)\n    if(parent !== el.parentNode)\n      parent.appendChild(el)\n  }\n  doc.on('row_update', update)\n}\n\n"}